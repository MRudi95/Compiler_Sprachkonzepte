/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPKlam().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAKlam(AKlam node)
    {
        defaultIn(node);
    }

    public void outAKlam(AKlam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKlam(AKlam node)
    {
        inAKlam(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PTerm> copy = new ArrayList<PTerm>(node.getSecond());
            for(PTerm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAKlam(node);
    }

    public void inAAddOp(AAddOp node)
    {
        defaultIn(node);
    }

    public void outAAddOp(AAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOp(AAddOp node)
    {
        inAAddOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAAddOp(node);
    }

    public void inASubOp(ASubOp node)
    {
        defaultIn(node);
    }

    public void outASubOp(ASubOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubOp(ASubOp node)
    {
        inASubOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outASubOp(node);
    }

    public void inAMulOp(AMulOp node)
    {
        defaultIn(node);
    }

    public void outAMulOp(AMulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulOp(AMulOp node)
    {
        inAMulOp(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        outAMulOp(node);
    }

    public void inADivOp(ADivOp node)
    {
        defaultIn(node);
    }

    public void outADivOp(ADivOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOp(ADivOp node)
    {
        inADivOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOp(node);
    }

    public void inAKlamTerm(AKlamTerm node)
    {
        defaultIn(node);
    }

    public void outAKlamTerm(AKlamTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKlamTerm(AKlamTerm node)
    {
        inAKlamTerm(node);
        if(node.getKlam() != null)
        {
            node.getKlam().apply(this);
        }
        outAKlamTerm(node);
    }

    public void inANumTerm(ANumTerm node)
    {
        defaultIn(node);
    }

    public void outANumTerm(ANumTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        inANumTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumTerm(node);
    }
}
